{"version":3,"sources":["../../src/models/auto_table_build.js"],"names":["mysql","require","kline_type","connection","createConnection","host","user","password","port","database","buildAllTable","cb","console","log","options","map","val","index","tableName","ex","currency","period","usql","query","err","result","errno","buildLatestTable","dropTableData","res","bookkeepingTable","coinmarketcapListLatest"],"mappings":"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","file":"auto_table_build.js","sourcesContent":["\nvar mysql  = require('mysql');\nvar kline_type = require('../../kline_type'); //表类型json数据包\n\nvar connection = mysql.createConnection({    \n\n  host     : '127.0.0.1',      \n\n  user     : 'root',             \n\n  password : '123456',      \n\n  port: '3306',                  \n\n  database: 'im_k_data',\n\n});\n\n//创建四大交易所的k线数据表\nvar buildAllTable = function(cb){\n\n    console.log(\"buildAllTable>>>>>>>>>>>>>>>>start\");\n    kline_type.kline_type(function(options){ \n\n        options.map((val,index)=>{//遍历最新数据\n\n            var tableName = \"k_\"+val.ex+\"_\"+val.currency+\"_\"+val.period;\n            var usql = \"CREATE TABLE \"+tableName+\"(ID int(255),OPEN varchar(255), CLOSE varchar(255),LOW varchar(255),HIGH varchar(255),VOL varchar(255),UPDATE_TIME varchar(255))\";\n\n            connection.query(usql,function(err, result){\n                \n                if (err) {\n\n                    if (err && err.errno == 1050) { console.log(tableName+\"表已经存在\");}else{console.log(err)}\n                    return ;\n                }else{\n                    \n                    console.log(tableName+\"创建成功\") ; \n                }\n            })\n        })\n    })\n}\n\n\n\n//创建实时数据缓存表\nvar buildLatestTable = function(options){\n\n    options.map((val,index)=>{//遍历最新数据        \n        //ID - - 时间戳 k线的身份标识\n        //COINNAME - - 币名\n        //PRICE - - 当前价\n        //HIGHT - - 最高价99\n        //LOW - - 最低价\n        //VOL - - 成交量(btc)\n        //RATE_PERCENT - - 波动百分比\n        //SYMBOL_TYPE - - 交易对类型(usdt,btc,eth...)\n        //TIMESTAMP - - 时间戳\n        var tableName = val.ex+\"_symbol_latest\";\n        var usql = \"CREATE TABLE \"+tableName+\"(ID int(255),COINNAME varchar(255),PRICE varchar(255),HIGHT varchar(255),LOW varchar(255),VOL varchar(255), RATE_PERCENT varchar(255),SYMBOL_TYPE varchar(255),TIMESTAMP varchar(255))\";\n\n        connection.query(usql,function(err, result){\n            if (err) {\n\n                if (err.errno == 1050) { console.log(tableName+\"表已经存在\"); }\n                return ;\n            }else{\n                \n                console.log(tableName+\"创建成功\") ; \n            }\n        })\n    })\n}\n\nvar options = [\n    {ex : 'huobi'},\n    {ex : 'binance'},\n    {ex : 'gate'},\n    {ex : 'okex'},\n];\n\n\n\n\n//清空所有数据表格的数据\nvar dropTableData = function(cb){\n\n    console.log(\"清空所有数据表格的数据>>>>>>>>>>>>>>>>>>start\");\n    kline_type.kline_type(function(res){\n        \n        res.map((val,index)=>{//遍历最新数据\n\n            var tableName = \"k_\"+val.ex+\"_\"+val.currency+\"_\"+val.period;\n            var usql = \"truncate TABLE \"+tableName;\n\n            connection.query(usql,function(err, result){\n\n                if (err) {\n\n                    if (err) { console.log(tableName+\"表err\"+err);}   \n                    return ;\n                }else{\n                    \n                    console.log(tableName+\"清空成功\") ; \n                }\n            })\n        })\n    })\n}\n\n\n//清空所有数据表格的数据\nvar bookkeepingTable = function(cb){\n\n    console.log(\"流水账 表格>>>>>>>>>>>>>>>>>>start\");\nvar tableName = \"monitor_bookkeeping\";\n   var usql = \"truncate TABLE \"+tableName;\n\n        connection.query(usql,function(err, result){\n\n            if (err) {\n\n                if (err) { console.log(tableName+\"表err\"+err);}   \n                return ;\n            }else{\n                \n                console.log(tableName+\"清空成功\") ; \n            }\n        })\n   \n    var tableName = \"monitor_bookkeeping\";\n\n    var usql = \"CREATE TABLE \"+tableName+\"(ID int(255),START_TIME varchar(255),VALID_TIME varchar(255),EX varchar(255),CURRENCY varchar(255),PERIOD varchar(255),PRICE varchar(255),RATE_PERCENT varchar(255),TYPE varchar(255))\";\n    console.log(usql);\n    connection.query(usql,function(err, result){\n\n        if (err) {\n            \n            if (err.errno == 1050) { console.log(tableName+\"表已经存在\"); } \n            return ;\n        }else{\n            \n            console.log(tableName+\"创建成功\") ; \n        }\n    })\n}\n\n\n//coinmarketcap -(listings-latest)\nvar coinmarketcapListLatest = function(cb){\n\n    var tableName = \"coinmarketcap_listings_latest\";\n    var usql = \"truncate TABLE \"+tableName;\n    console.log(\"coinmarketcap table>>>>>>>>>>>>>>>>>>start\");\n\n    connection.query(usql,function(err, result){\n\n        if (err) {\n\n            console.log(tableName+\"表err\"+err);   \n            return ;\n        }else{\n            console.log(tableName+\"清空成功\") ; \n        }\n    })\n\n    //id(标示)name(名字) symbol(交易对)slug(全称)turnover(换手率)circulating_supply(当前供应量) total_supply(总供应量) max_supply(最大供应量) last_updated(更新时间) usd_price(美元价格) usd_volume_24h(美元24小时成交量),usd_percent_change_1h(美元报价1小时涨跌幅) usd_percent_change_24h(美元报价24小时涨跌幅) usd_percent_change_7d(美元报价7天涨跌幅)  usd_market_cap(美元报价交易量), usd_last_updated (美元报价数据更新时间), btc_price(btc报价的价格), btc_change_1h(btc统计的1h成交量),btc_percent_change_24h(btc报价的24小时涨跌幅),btc_percent_change_7d(btc报价的7天涨跌幅),btc_market_cap(btc报价统计的成交量),btc_last_updated(btc报价的统计时间),status_timestamp\n    var usql = \"CREATE TABLE \"+tableName+\"(id int(255),name varchar(255),symbol varchar(255),slug varchar(255),turnover varchar(255),circulating_supply varchar(255),total_supply varchar(255),max_supply varchar(255), last_updated varchar(255), usd_price varchar(255), usd_volume_24h varchar(255),usd_percent_change_1h varchar(255), usd_percent_change_24h varchar(255),usd_percent_change_7d varchar(255), usd_market_cap varchar(255), usd_last_updated varchar(255),cny_price varchar(255), cny_volume_24h varchar(255),cny_market_cap varchar(255),btc_price varchar(255), btc_change_1h varchar(255),btc_percent_change_24h varchar(255),btc_percent_change_7d varchar(255),btc_market_cap varchar(255),btc_last_updated varchar(255),status_timestamp varchar(255))\";\n\n    connection.query(usql,function(err, result){\n\n        if (err) {\n\n             if (err.errno == 1050) { console.log(tableName+\"表已经存在\"); } \n            return ;\n        }else{\n            \n            console.log(tableName+\"创建成功\") ; \n        }\n    })  \n}\ndropTableData();//执行>>>清空所有表格数据\nbuildAllTable();//执行>>>创建四大交易所的k线数据表格\nbuildLatestTable(options);//执行>>>创建实时数据缓存表\nbookkeepingTable();//执行>>>异常波动流水表格\ncoinmarketcapListLatest();//执行>>>coinmarketcap表格\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}