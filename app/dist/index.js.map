{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","use","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","all","req","res","next","header","db","listen","process","env","PORT","port","console","log","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,IAAIA,MAAM,wBAAV;;AAEAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEA;AACAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACAJ,IAAII,GAAJ,CAAQ,oBAAK;;AAEZC,iBAAgBC,iBAAOC;;AAFX,CAAL,CAAR;;AAMAP,IAAII,GAAJ,CAAQI,qBAAWC,IAAX,CAAgB;;AAEvBC,QAAQJ,iBAAOK;;AAFQ,CAAhB,CAAR;;AAMAX,IAAIY,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAClCD,KAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,KAAIE,MAAJ,CAAW,8BAAX,EAA2C,+BAA3C;AACAF,KAAIE,MAAJ,CAAW,8BAAX,EAA0C,6BAA1C;AACAD;AACH,CALD;;AAOA;AACA,kBAAc,cAAM;AACnB;AACAf,KAAII,GAAJ,CAAQ,0BAAW,EAAEE,wBAAF,EAAUW,MAAV,EAAX,CAAR;AACA;AACAjB,KAAII,GAAJ,CAAQ,GAAR,EAAa,qBAAI,EAAEE,wBAAF,EAAUW,MAAV,EAAJ,CAAb;AACA;AACAjB,KAAIC,MAAJ,CAAWiB,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBf,iBAAOgB,IAA7C,EAAmD,YAAM;AACxDC,UAAQC,GAAR,sBAA+BxB,IAAIC,MAAJ,CAAWwB,OAAX,GAAqBH,IAApD;AACA,EAFD;AAGA,CATD;;kBAWetB,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport initializeDb from './db';\nimport middleware from './middleware';\nimport api from './api/index';\nimport config from './config.json';\n\n\nlet app = express();\n\napp.server = http.createServer(app);\n\n// logger\napp.use(morgan('dev'));\n\n// 3rd party middleware\napp.use(cors({\n\n\texposedHeaders: config.corsHeaders\n\n}));\n\napp.use(bodyParser.json({\n\n\tlimit : config.bodyLimit\n\n}));\n\napp.all('*', function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With,Content-Type\");\n    res.header(\"Access-Control-Allow-Methods\",\"PUT,POST,GET,DELETE,OPTIONS\");\n    next();\n});\n\n// connect to db\ninitializeDb( db => {\n\t// internal middleware\n\tapp.use(middleware({ config, db }));\n\t// api router\n\tapp.use('/', api({ config, db }));\n\t//start\n\tapp.server.listen(process.env.PORT || config.port, () => {\n\t\tconsole.log(`Started on port ${app.server.address().port}`);\n\t});\n});\n\nexport default app;\n\n\n\n\n\n\n\n"]}