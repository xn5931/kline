{"version":3,"sources":["../../src/api/test.js"],"names":["config","db","id","load","req","callback","console","log","test","tests","find","err","index","res","params","json","create","body","length","toString","push","read","update","key","sendStatus","delete","splice","indexOf"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe;AAAA,KAAGA,MAAH,QAAGA,MAAH;AAAA,KAAWC,EAAX,QAAWA,EAAX;AAAA,QAAoB,wCAAS;;AAE3C;AACAC,MAAK,MAHsC;;AAK3C;;;AAGAC,MAR2C,gBAQtCC,GARsC,EAQjCF,EARiC,EAQ7BG,QAR6B,EAQnB;AACvBC,WAAQC,GAAR,CAAYH,GAAZ;AACA,OAAII,OAAOC,gBAAMC,IAAN,CAAY;AAAA,WAAQF,KAAKN,EAAL,KAAUA,EAAlB;AAAA,IAAZ,CAAX;AAAA,OACCS,MAAMH,OAAO,IAAP,GAAc,WADrB;AAECF,WAAQC,GAAR,CAAY,WAAZ,EAAwBL,EAAxB;AACAI,WAAQC,GAAR,CAAY,WAAZ;AACDF,YAASM,GAAT,EAAcH,IAAd;AACA,GAf0C;;;AAiB3C;AACAI,OAlB2C,wBAkBzBC,GAlByB,EAkBpB;AAAA,OAAfC,MAAe,SAAfA,MAAe;;;AAEtBR,WAAQC,GAAR,CAAY,WAAZ,EAAwBO,MAAxB;AACAD,OAAIE,IAAJ,CAASN,eAAT;AACA,GAtB0C;;;AAwB3C;AACAO,QAzB2C,yBAyB1BH,GAzB0B,EAyBrB;AAAA,OAAbI,IAAa,SAAbA,IAAa;;AACrBX,WAAQC,GAAR,CAAY,WAAZ;AACAU,QAAKf,EAAL,GAAUO,gBAAMS,MAAN,CAAaC,QAAb,CAAsB,EAAtB,CAAV;AACAV,mBAAMW,IAAN,CAAWH,IAAX;AACAJ,OAAIE,IAAJ,CAASE,IAAT;AACA,GA9B0C;;;AAgC3C;AACAI,MAjC2C,uBAiC5BR,GAjC4B,EAiCvB;AAAA,OAAbL,IAAa,SAAbA,IAAa;;AACnBF,WAAQC,GAAR,CAAY,WAAZ;AACAM,OAAIE,IAAJ,CAASP,IAAT;AACA,GApC0C;;;AAsC3C;AACAc,QAvC2C,yBAuCpBT,GAvCoB,EAuCf;AAAA,OAAnBL,IAAmB,SAAnBA,IAAmB;AAAA,OAAbS,IAAa,SAAbA,IAAa;;AAC3B,QAAK,IAAIM,GAAT,IAAgBN,IAAhB,EAAsB;AACrB,QAAIM,QAAM,IAAV,EAAgB;AACff,UAAKe,GAAL,IAAYN,KAAKM,GAAL,CAAZ;AACA;AACD;AACDV,OAAIW,UAAJ,CAAe,GAAf;AACA,GA9C0C;;;AAgD3C;AACAC,QAjD2C,0BAiD1BZ,GAjD0B,EAiDrB;AAAA,OAAbL,IAAa,SAAbA,IAAa;;AACrBC,mBAAMiB,MAAN,CAAajB,gBAAMkB,OAAN,CAAcnB,IAAd,CAAb,EAAkC,CAAlC;AACAK,OAAIW,UAAJ,CAAe,GAAf;AACA;AApD0C,EAAT,CAApB;AAAA,C","file":"test.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport tests from '../models/tests';\n\nexport default ({ config, db }) => resource({\n\n\t/** Property name to store preloaded entity on `request`. */\n\tid : 'test',\n\n\t/** For requests with an `id`, you can auto-load the entity.\n\t *  Errors terminate the request, success sets `req[id] = data`.\n\t */\n\tload(req, id, callback) {\n\t\tconsole.log(req)\n\t\tlet test = tests.find( test => test.id===id ),\n\t\t\terr = test ? null : 'Not found';\n\t\t\tconsole.log(\".......00\",id);\n\t\t\tconsole.log(\".......01\");\n\t\tcallback(err, test);\n\t},\n\n\t/** GET / - List all entities */\n\tindex({ params }, res) {\n\t\t\n\t\tconsole.log(\".......02\",params);\n\t\tres.json(tests);\n\t},\n\n\t/** POST / - Create a new entity */\n\tcreate({ body }, res) {\n\t\tconsole.log(\".......03\");\n\t\tbody.id = tests.length.toString(36);\n\t\ttests.push(body);\n\t\tres.json(body);\n\t},\n\n\t/** GET /:id - Return a given entity */\n\tread({ test }, res) {\n\t\tconsole.log(\".......04\");\n\t\tres.json(test);\n\t},\n\n\t/** PUT /:id - Update a given entity */\n\tupdate({ test, body }, res) {\n\t\tfor (let key in body) {\n\t\t\tif (key!=='id') {\n\t\t\t\ttest[key] = body[key];\n\t\t\t}\n\t\t}\n\t\tres.sendStatus(204);\n\t},\n\n\t/** DELETE /:id - Delete a given entity */\n\tdelete({ test }, res) {\n\t\ttests.splice(tests.indexOf(test), 1);\n\t\tres.sendStatus(204);\n\t}\n});\n"]}