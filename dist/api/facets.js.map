{"version":3,"sources":["../../src/api/facets.js"],"names":["config","db","id","load","req","callback","facet","facets","find","err","console","log","index","res","params","json","create","body","length","toString","push","read","update","key","sendStatus","delete","splice","indexOf"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBAEe;AAAA,KAAGA,MAAH,QAAGA,MAAH;AAAA,KAAWC,EAAX,QAAWA,EAAX;AAAA,QAAoB,wCAAS;;AAE3C;AACAC,MAAK,OAHsC;;AAK3C;;;AAGAC,MAR2C,gBAQtCC,GARsC,EAQjCF,EARiC,EAQ7BG,QAR6B,EAQnB;AACvB,OAAIC,QAAQC,iBAAOC,IAAP,CAAa;AAAA,WAASF,MAAMJ,EAAN,KAAWA,EAApB;AAAA,IAAb,CAAZ;AAAA,OACCO,MAAMH,QAAQ,IAAR,GAAe,WADtB;AAECI,WAAQC,GAAR,CAAY,UAAZ;AACDN,YAASI,GAAT,EAAcH,KAAd;AACA,GAb0C;;;AAe3C;AACAM,OAhB2C,wBAgBzBC,GAhByB,EAgBpB;AAAA,OAAfC,MAAe,SAAfA,MAAe;;AACtBJ,WAAQC,GAAR,CAAY,UAAZ,EAAuBG,MAAvB;AACAD,OAAIE,IAAJ,CAASR,gBAAT;AACA,GAnB0C;;;AAqB3C;AACAS,QAtB2C,yBAsB1BH,GAtB0B,EAsBrB;AAAA,OAAbI,IAAa,SAAbA,IAAa;;AACrBP,WAAQC,GAAR,CAAY,UAAZ;AACAM,QAAKf,EAAL,GAAUK,iBAAOW,MAAP,CAAcC,QAAd,CAAuB,EAAvB,CAAV;AACAZ,oBAAOa,IAAP,CAAYH,IAAZ;AACAJ,OAAIE,IAAJ,CAASE,IAAT;AACA,GA3B0C;;;AA6B3C;AACAI,MA9B2C,uBA8B3BR,GA9B2B,EA8BtB;AAAA,OAAdP,KAAc,SAAdA,KAAc;;AACpBI,WAAQC,GAAR,CAAY,UAAZ;AACAE,OAAIE,IAAJ,CAAST,KAAT;AACA,GAjC0C;;;AAmC3C;AACAgB,QApC2C,yBAoCnBT,GApCmB,EAoCd;AAAA,OAApBP,KAAoB,SAApBA,KAAoB;AAAA,OAAbW,IAAa,SAAbA,IAAa;;AAC7BP,WAAQC,GAAR,CAAY,UAAZ;AACC,QAAK,IAAIY,GAAT,IAAgBN,IAAhB,EAAsB;AACrB,QAAIM,QAAM,IAAV,EAAgB;AACfjB,WAAMiB,GAAN,IAAaN,KAAKM,GAAL,CAAb;AACA;AACD;AACDV,OAAIW,UAAJ,CAAe,GAAf;AACA,GA5C0C;;;AA8C3C;AACAC,QA/C2C,0BA+CzBZ,GA/CyB,EA+CpB;AAAA,OAAdP,KAAc,SAAdA,KAAc;;AACtBI,WAAQC,GAAR,CAAY,UAAZ;AACAJ,oBAAOmB,MAAP,CAAcnB,iBAAOoB,OAAP,CAAerB,KAAf,CAAd,EAAqC,CAArC;AACAO,OAAIW,UAAJ,CAAe,GAAf;AACA;AAnD0C,EAAT,CAApB;AAAA,C","file":"facets.js","sourcesContent":["import resource from 'resource-router-middleware';\nimport facets from '../models/facets';\n\nexport default ({ config, db }) => resource({\n\n\t/** Property name to store preloaded entity on `request`. */\n\tid : 'facet',\n\n\t/** For requests with an `id`, you can auto-load the entity.\n\t *  Errors terminate the request, success sets `req[id] = data`.\n\t */\n\tload(req, id, callback) {\n\t\tlet facet = facets.find( facet => facet.id===id ),\n\t\t\terr = facet ? null : 'Not found';\n\t\t\tconsole.log(\".......1\");\n\t\tcallback(err, facet);\n\t},\n\n\t/** GET / - List all entities */\n\tindex({ params }, res) {\n\t\tconsole.log(\".......2\",params);\n\t\tres.json(facets);\n\t},\n\n\t/** POST / - Create a new entity */\n\tcreate({ body }, res) {\n\t\tconsole.log(\".......3\");\n\t\tbody.id = facets.length.toString(36);\n\t\tfacets.push(body);\n\t\tres.json(body);\n\t},\n\n\t/** GET /:id - Return a given entity */\n\tread({ facet }, res) {\n\t\tconsole.log(\".......4\");\n\t\tres.json(facet);\n\t},\n\n\t/** PUT /:id - Update a given entity */\n\tupdate({ facet, body }, res) {\n\tconsole.log(\".......5\");\n\t\tfor (let key in body) {\n\t\t\tif (key!=='id') {\n\t\t\t\tfacet[key] = body[key];\n\t\t\t}\n\t\t}\n\t\tres.sendStatus(204);\n\t},\n\n\t/** DELETE /:id - Delete a given entity */\n\tdelete({ facet }, res) {\n\t\tconsole.log(\".......6\");\n\t\tfacets.splice(facets.indexOf(facet), 1);\n\t\tres.sendStatus(204);\n\t}\n});\n"]}